{"version":3,"sources":["index.js"],"names":["delay","ms","Promise","resolve","setTimeout","logger","time","console","log","then","users","name","active","toggleUserState","allUsers","username","map","user","table","randomIntegerFromInterval","min","max","Math","floor","random","makeTransaction","transaction","reject","id","logSuccess","logError","warn","amount","catch"],"mappings":";;;AAoIA,aApIA,QAAA,oBAaA,MAAMA,EAAQC,GAEL,IAAIC,QAAQC,IACjBC,WAAW,KACTD,KAAYF,SACRA,OAKJI,EAASC,GAAQC,QAAQC,uBAAuBF,OAGtDN,EAAM,KAAMS,KAAKJ,GACjBL,EAAM,KAAMS,KAAKJ,GACjBL,EAAM,MAAMS,KAAKJ,GAqBjB,MAAMK,EAAQ,CACZ,CAAEC,KAAM,QAASC,QAAQ,GACzB,CAAED,KAAM,OAAQC,QAAQ,GACxB,CAAED,KAAM,OAAQC,QAAQ,IAG1B,SAASC,EAAgBC,EAAUC,GAC1B,OAAA,IAAIb,QAAQC,GACnBA,EAASW,EAASE,IAAIC,GAAQA,EAAKN,OAASI,EAAW,IAAKE,EAAML,QAASK,EAAKL,QAAWK,KAG7FJ,EAAgBH,EAAO,SAASD,KAAKF,QAAQW,OAC7CL,EAAgBH,EAAO,QAAQD,KAAKF,QAAQW,OAyC5C,MAAMC,EAA4B,CAACC,EAAKC,IAC/BC,KAAKC,MAAMD,KAAKE,UAAYH,EAAMD,EAAM,GAAKA,GAGhDK,EAAmBC,IACjB1B,MAAAA,EAAQmB,EAA0B,IAAK,KAEtC,OAAA,IAAIjB,QAAQ,CAACC,EAASwB,KAC3BvB,WAAW,KACQkB,KAAKE,SAAW,GAGjCrB,EAAQ,CAAEyB,GAAIF,EAAYE,GAAItB,KAAMN,IAEpC2B,EAAOD,EAAYE,KAEpB5B,MAIL,SAAS6B,GAAW,GAAED,EAAF,KAAMtB,IACxBC,QAAQC,mBAAmBoB,kBAAmBtB,OAGhD,SAASwB,EAAUF,GACjBrB,QAAQwB,qCAAqCH,8BAI/CH,EAAgB,CAAEG,GAAI,GAAII,OAAQ,MAAOvB,KAAKoB,GAAYI,MAAMH,GAChEL,EAAgB,CAAEG,GAAI,GAAII,OAAQ,MAAOvB,KAAKoB,GAAYI,MAAMH","file":"src.6404220d.js","sourceRoot":"../src","sourcesContent":["import './sass/main.scss';\n\n\n// TASK 1\n\n// Напиши функцию delay(ms), которая возвращает промис, переходящий в состояние \"resolved\" через ms миллисекунд. Значением исполнившегося промиса должно быть то кол-во миллисекунд которое передали во время вызова функции delay.\n\n// const delay = ms => {\n//   // Change this function\n// };\n\n// const logger = time => console.log(`Fulfilled after ${time}ms`);\n\nconst delay = ms => {\n\n  return new Promise(resolve => {\n    setTimeout(() => {\n      resolve (`${ms}`)\n    }, `${ms}`);\n    // Change this function\n  })\n};\n\nconst logger = time => console.log(`Fulfilled after ${time}ms`);\n\n// Tests\ndelay(2000).then(logger); // Fulfilled after 2000ms\ndelay(1000).then(logger); // Fulfilled after 1000ms\ndelay(1500).then(logger); // Fulfilled after 1500ms\n\n\n// TASK 2\n// Перепиши функцию toggleUserState() так, чтобы она не использовала callback-функцию callback, а принимала всего два параметра allUsers и username и возвращала промис.\n\n// const users = [\n//   { name: 'Mango', active: true },\n//   { name: 'Poly', active: false },\n//   { name: 'Ajax', active: false },\n// ];\n\n// const toggleUserState = (allUsers, username, callback) => {\n//   const updatedUsers = allUsers.map(user =>\n//     user.name === username ? { ...user, active: !user.active } : user\n//   );\n\n//   callback(updatedUsers);\n// };\n\n\nconst users = [\n  { name: 'Mango', active: true },\n  { name: 'Poly', active: false },\n  { name: 'Ajax', active: false },\n];\n\nfunction toggleUserState(allUsers, username) {\n  return new Promise(resolve =>\n  resolve (allUsers.map(user => user.name === username ? { ...user, active: !user.active } : user)))\n}\n\ntoggleUserState(users, 'Mango').then(console.table);\ntoggleUserState(users, 'Ajax').then(console.table);\n\n\n// TASK 3 \n// Перепиши функцию makeTransaction() так, чтобы она не использовала callback-функции onSuccess и onError, \n// а принимала всего один параметр transaction и возвращала промис.\n\n// const randomIntegerFromInterval = (min, max) => {\n//   return Math.floor(Math.random() * (max - min + 1) + min);\n// };\n\n// const makeTransaction = (transaction, onSuccess, onError) => {\n//   const delay = randomIntegerFromInterval(200, 500);\n\n//   setTimeout(() => {\n//     const canProcess = Math.random() > 0.3;\n\n//     if (canProcess) {\n//       onSuccess({ id: transaction.id, time: delay });\n//     } else {\n//       onError(transaction.id);\n//     }\n//   }, delay);\n// };\n\n// const logSuccess = ({ id, time }) => {\n//   console.log(`Transaction ${id} processed in ${time}ms`);\n// };\n\n// const logError = id => {\n//   console.warn(`Error processing transaction ${id}. Please try again later.`);\n// };\n\n// // Currently the function works like this\n// makeTransaction({ id: 70, amount: 150 }, logSuccess, logError);\n// makeTransaction({ id: 71, amount: 230 }, logSuccess, logError);\n\n// // The function should work like this\n// makeTransaction({ id: 70, amount: 150 }).then(logSuccess).catch(logError);\n// makeTransaction({ id: 71, amount: 230 }).then(logSuccess).catch(logError);\n\nconst randomIntegerFromInterval = (min, max) => {\n  return Math.floor(Math.random() * (max - min + 1) + min);\n};\n\nconst makeTransaction = (transaction) => {\n  const delay = randomIntegerFromInterval(200, 500);\n\n  return new Promise((resolve, reject) => {\n    setTimeout(() => {\n    const canProcess = Math.random() > 0.3;\n\n    if (canProcess) {\n      resolve({ id: transaction.id, time: delay });\n    } else {\n      reject(transaction.id);\n    }\n  }, delay);})\n  \n};\n\nfunction logSuccess({ id, time }) {\n  console.log(`Transaction ${id} processed in ${time}ms`);\n};\n\nfunction logError (id) {\n  console.warn(`Error processing transaction ${id}. Please try again later.`);\n};\n\n// The function should work like this\nmakeTransaction({ id: 70, amount: 150 }).then(logSuccess).catch(logError);\nmakeTransaction({ id: 71, amount: 230 }).then(logSuccess).catch(logError);\n"]}